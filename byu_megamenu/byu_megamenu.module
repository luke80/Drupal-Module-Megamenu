<?php

// $Id: byu_megamenu.module $

/**
 * @file
 * Provides additional menu attributes to accomodate megamenus.
 */
function byu_megamenu_init() { //this doesn't have to happen, it was just to automatically include the megamenu if the theme and module were enabled
  $main_menu_data = getMenuArray(menu_tree_all_data(variable_get('menu_main_links_source', 'main-menu'))); //this is done so no notice appears if no menu items exist
  if (count($main_menu_data)>0) {
    $html = renderMenu($main_menu_data);
//    drupal_add_js('jQuery(document).ready(function () {jQuery("#primary-nav").html(\'' . $html . '\'); });', 'inline');
  }
}

/**
 * Implementation of hook_form_alter().
 */
function byu_megamenu_form_alter(&$form, $form_state, $form_id) {
	if ($form_id == 'menu_edit_item') {
		$item = $form['mlid']['#value'];
		$defaults_array = _byu_megamenu_get_menu_data($item);
		$mega_enabled_default = $defaults_array['mega_enabled'];
		$image_path_default = $defaults_array['image_path']; //image_path is the fid that should tie into the file_managed table
		$image_alt_default = $defaults_array['image_alt'];
		$featured_text_default = $defaults_array['featured_text'];
		$featured_link_default = $defaults_array['featured_link'];
		$featured_only_default = $defaults_array['featured_only'];

		$form['megamenu'] = array(
			'#type' => 'fieldset',
			'#weight' => 5,
			'#title' => t('Megamenu dropdown settings'),
			'#description' => t('Options to use a featured image for this menu item.'),
			'#attributes' => array('classes' => array('theme-settings-bottom')),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE,
		);

		$form['megamenu']['featured_link'] = array(
			'#type' => 'checkbox',
			'#title' => t('Use as a <strong>featured</strong> link'),
			'#description' => t('Featured links are those that are bolded and displayed first under the dropdown'),
			'#return_value' => 1,
			'#default_value' => $featured_link_default,
			'#weight' => 0,
		);

		$form['megamenu']['mega_enabled'] = array(
			'#type' => 'checkbox',
			'#title' => t('Include a picture with this link'),
			'#description' => t('Remember to only select two pictures per parent item'),
			'#return_value' => 1,
			'#default_value' => $mega_enabled_default,
		);

		$form['megamenu']['image_path'] = array(
			'#type' => 'managed_file',
			'#title' => t('Image'),
			'#description' => t('Upload an Image'),
			'#default_value' => $image_path_default,
			'#upload_location' => 'public://megamenu/',
			'#states' => array(
				'visible'  => array(':input[name="mega_enabled"]' => array('checked' => TRUE)),
				'required' => array(':input[name="mega_enabled"]' => array('checked' => FALSE))
			),
		);

		$form['megamenu']['image_alt'] = array(
			'#type' => 'textfield',
			'#title' => t('Alt Tag'),
			'#default_value' => $image_alt_default,
			'#description' => t('Include an alt tag for the image. Used for accessibility purposes.'),
			'#states' => array(
				'visible' => array( ':input[name="mega_enabled"]' => array('checked' => TRUE)),
				'required' => array(':input[name="mega_enabled"]' => array('checked' => TRUE))
			),
		);

		$form['megamenu']['featured_text'] = array(
			'#type' => 'textarea',
			'#title' => t('Description Text'),
			'#default_value' => $featured_text_default,
			'#format' => 'text_format',
			'#cols' => 120,
			'#rows' => 10,
			'#description' => t('The text to be displayed underneath the image.'),
			'#states' => array(
				'visible' => array( ':input[name="mega_enabled"]' => array('checked' => TRUE)),
				'required' => array(':input[name="mega_enabled"]' => array('checked' => TRUE))
			)
		);
		
		$form['megamenu']['featured_only'] = array(
			'#type' => 'checkbox',
			'#title' => t('Link once'),
			'#description' => t('Check this to suppress menu item duplication.'),
			'#return_value' => 1,
			'#default_value' => $featured_only_default
		);
		

		//This changes the description on the existing link line
		$form['link_path']['#description'] = "The path for this menu link. This can be an internal Drupal path such as node/add or an external URL such as http://drupal.org. Enter <front> to link to the front page. Use http://# for a empty link.";
		$form['submit']['#weight'] = 2;
		$form['#submit'][] = 'byu_megamenu_form_submit';
	}
}

/**
 * Returns the current fid for the menu_item
 */
function byu_megamenu_get_file_id($mlid) {
	return db_query("SELECT image_path FROM {byu_megamenu} WHERE mlid = :mlid", array(':mlid' => $mlid))->fetchField();
}

/**
 * Save attribute information for this menu.
 */
function byu_megamenu_form_submit(&$form, $form_state) {
	$megamenu = $form_state['values'];
	$menu_name = '';
	$menu_mlid = 0;

	if ($megamenu['image_path'] != 0) {
		$file = file_load($megamenu['image_path']); // Load the file via fid
		$file->status = FILE_STATUS_PERMANENT; // Change status to permanent.
		file_save($file); // Save.
		file_usage_add($file, 'byu_megamenu', 'highlight_image', 1); //Increments usage count by 1
	} elseif ($megamenu['image_path'] == 0) { 
		// If the file was removed we need to remove the module's reference to the removed file's fid, and remove the file.
		$fid = byu_megamenu_get_file_id($megamenu['mlid']);
		$file = $fid ? file_load($fid) : FALSE;

		if ($file) { // When a module is managing a file, it must manage the usage count.Here we decrement the usage count with file_usage_delete().
			file_usage_delete($file, 'byu_megamenu', 'highlight_image', 1);
			file_delete($file); // The file_delete() function takes a file object and checks to see if the file is being used by any other modules. If it is the delete operation is cancelled, otherwise the file is deleted.
		}
	}
	if ($megamenu['form_id'] == 'menu_edit_item' ) {
		$menu_name = $megamenu['menu_name'];
		$mlid = $megamenu['mlid'];
		$mega_enabled = $megamenu['mega_enabled'];
		$image_path = $megamenu['image_path'];
		$image_alt = $megamenu['image_alt'];
		$featured_text = $megamenu['featured_text'];
		$featured_link = $megamenu['featured_link'];
		$featured_only = $megamenu['featured_only'];

		db_merge('byu_megamenu')
            ->key(array('mlid' => $mlid))
            ->fields(array(
                'mega_enabled' => $mega_enabled,
                'image_path' => $image_path,
                'image_alt' => $image_alt,
                'featured_text' => $featured_text,
                'featured_link' => $featured_link,
                'featured_only' => $featured_only,
            ))
            ->execute();
	}
}

// end function

/**
 * Implements hook_menu_link_delete().
 * This will delete the items in the byu_megamenu table when the associated menu item is deleted
 */
function byu_megamenu_menu_link_delete($link) {
	db_delete('byu_megamenu')
		->condition('mlid', $link['mlid'])
        ->execute();
}

/**
 * Gets data for the current mlid.
 */
function _byu_megamenu_get_menu_data($mlid) {
	$result = db_select('byu_megamenu', 's')
		->fields('s')
		->condition('mlid', $mlid, '=')
		->condition(db_or()->condition('mega_enabled', 1, '=')->condition('featured_link', 1, '='))
		->execute()
		->fetchAssoc();
	return $result;
}

function getMenuArray($self) {
	if (isset($self[0])) {
		return array();
	}
	$new = array(); //this is meant to be our new rebuilt render array 
	
	foreach ($self as $each) { //goes through entire drupal menu array
		$mlid = $each['link']['mlid'];
		$title = htmlspecialchars($each['link']['title'], ENT_QUOTES);
		$path = $each['link']['link_path'];
		$hidden = $each['link']['hidden'];
    if (isset($each['link']['options']['attributes']['title'])) {
		$description = $each['link']['options']['attributes']['title'];
    } else $description = "";
    if (empty($each['link']['options']['attributes']['title'])) {
        $each['link']['options']['attributes']['title'] = $each['link']['link_title'];
    }
    $attributes = $each['link']['options']['attributes'];
    $plid = $each['link']['plid'];

    $result = _byu_megamenu_get_menu_data($mlid); //this gets our byu_megamenu row data for this parti and puts it into &result
    // puts in the values of drupal menu item into the $new[] array 
    if ($hidden) {
      continue;
    } else {
      $new[$mlid] = array(
          'id' => $mlid,
          'plid' => $plid,
          'title' => $title,
          'path' => url($path),
          'featured_link' => $result['featured_link'],
          'image_path' => $result['image_path'],
          'image_alt' => $result['image_alt'],
          'featured_text' => htmlspecialchars($result['featured_text'], ENT_QUOTES),
          'featured_only' => $result['featured_only'],
          'mega_menu' => $result['mega_enabled'],
          'description' => $description,
          'attributes' => $attributes,
      );
    }
    $new[$mlid]['below'] = getMenuArray($each['below']);
  } //end foreach

  return $new; //returns entire modified drupal array 
}

/**
 * Takes the modified drupal array from getMenuArray() and outputs HTML
 * @param type $tree
 * @return string
 */
function renderMenu($tree) {
  	$html = '<ul>';
	// Level 1 links are the top level links
	foreach ($tree as $lvl1) {
		$attributes ="";
        if ($lvl1['below'] == null) {
			//Checks to see if there are children links. If not, then a class='single'
            $lvl1['attributes']['class'][] = 'single';
            $attributes = getAttributes($lvl1['attributes']);
            $html .= '<li aria-haspopup="true"><a  href="' . $lvl1['path'] . '" ' . $attributes . '>' . $lvl1['title'] . '</a>';
		} else {
            $html .= '<li><a  href="' . $lvl1['path'] . '" ' . $attributes . '>' . $lvl1['title'] . '</a>';
      
			/* Section to calculate max number of links per columns */
			$MEGA_DIV_HEIGHT = 340;
			$LI_HEIGHT = 18.9;
			$MAX_ROWS_IN_MEGA = floor($MEGA_DIV_HEIGHT / $LI_HEIGHT);
			$featured_count = 0;
			$link_count = 0;
			
			if (isset($lvl1['below'])) {
				foreach ($lvl1['below'] as $lvl2) {
					$link_count++;
					if (isset($lvl2['featured_link']) && $lvl2['featured_link']) {
						$featured_count++;        
					}
					foreach ($lvl2['below'] as $lvl3) {
						$link_count++;
						if (isset($lvl3['featured_link']) && $lvl3['featured_link']) {
							$featured_count++;
						}
					}
				}
			}
			
			//Find the correct padding if link_count is odd or even
			$max_links_per_sdie = (is_int($link_count % 2)) ? $MAX_ROWS_IN_MEGA - ($featured_count * 2) : $MAX_ROWS_IN_MEGA - ($featured_count * 2) - 1;
	  
			$max_links_per_side = 14 - $featured_count;
			/* End max column link calculation */
      
			$is_mega = false;
			foreach ($lvl1['below'] as $lvl2) {
				if (isset($lvl2['mega_menu']) && $lvl2['mega_menu']) {
					$is_mega = true;
					break;
				}
				foreach ($lvl2['below'] as $lvl3) {
					if (isset($lvl3['mega_menu']) && $lvl3['mega_menu']) {
						$is_mega = true;
						break;
					}
				}
			}
			/* @var $sublink_count get's count of children */
			$sublink_count = $link_count;
      
			$links_class = ($sublink_count > $max_links_per_side && $is_mega) ? 'links double' : 'links';

			if ($is_mega) {
				$html .= '<div class="mega">';
				$html .= '<ul class="'. $links_class .'">';
			} elseif (empty($lvl1['below'])) {
				continue;
			} else {
				$html .= '<div class="sub">';
				$html .= '<ul class="'.$links_class.'">';
			}

			//-- Featured Links --
			$num_featured = 0;
			foreach ($lvl1['below'] as $lvl2) {
				if (isset($lvl2['featured_link']) && $lvl2['featured_link']) {
					$num_featured++;
				}
			}
			$featured_count = 0;
			$was_a_featured = false;
      
			// if there are no featured links, then the featured class isn't used
			if($num_featured > 0){
				$html .= '<li class="featured"><ul>';
			}
			
			foreach ($lvl1['below'] as $lvl2) {
                $attributes = "";
				if (isset($lvl2['featured_link']) && $lvl2['featured_link']) {
                    $attributes = getAttributes($lvl2['attributes']);
					$html .= '<li><a href="'.$lvl2['path'].'" title="'.$lvl2['description'].'"' .$attributes .'>'.$lvl2['title'].'</a></li>';
					$was_a_featured = true;
					$featured_count = 0;
				}
				
				// Check to see if parent is not featured and remove the indent where true
				$is_parent_featured_link = $lvl2['featured_link'];
				$child_count = 0;
				foreach ($lvl2['below'] as $lvl3) {
                    $attributes = "";
					if (isset($lvl3['featured_link']) && $lvl3['featured_link']) {
						$featured_count++;
						if ($featured_count == 1 && $is_parent_featured_link) {
							$html .= "<ul class=sublinks>"; //this will open children uls which causes the indent
						}
                      $attributes = getAttributes($lvl3['attributes']);
					  $html .= '<li><a href="' . $lvl3['path'] . '" title="' . $lvl3['description'] . '"' .$attributes .'>' . $lvl3['title'] . '</a></li>'; //this will print for all featured links
						$was_a_featured = true; //if we are in this we are on a featured link
					}
				}
				if ($featured_count > 0 && $is_parent_featured_link) { 
					$html .= "</ul>"; //Closes children uls
				} 
			}
			
			if($num_featured > 0){
				$html .= '</ul></li>';
			}
			
			if ($was_a_featured) {
				$was_a_featured = false;
			} 
			// -- End Featured Links --

			// -- Non-featured Links --
			$count_in_columns = 0; //this is to keep track of the number of links in a column
			$html .= '<li class="left"><ul>';
			foreach ($lvl1['below'] as $lvl2) {
                $attributes = "";
				if ($count_in_columns >= $max_links_per_side && $is_mega) {
					$html .= '</ul></li><li class="left"><ul>';
					$count_in_columns = 0;
				}
                $attributes = getAttributes($lvl2['attributes']);
                $html .= '<li'.(($lvl2['featured_only']>0 && ($lvl2['featured_link']>0||$lvl2['image_path']!=""))?' class="duplicate-feature"':'').'><a href="'.$lvl2['path'].'" title="'.$lvl2['description'].'"' .$attributes .'>'.$lvl2['title'].'</a></li>';
				$count_in_columns++;
				if (isset($lvl2['below']) && $lvl2['below']) {
					if ($count_in_columns >= $max_links_per_side && $is_mega) {
						$html .= '</li>';
						$html .= '</ul></li>';
						$count_in_columns = 0;
					} 
					$sublinks = (!empty($lvl2['below'])) ? TRUE : FALSE ;

					if ($sublinks) {
						$html .= '<ul class="sublinks">';
					}
					foreach ($lvl2['below'] as $lvl3) {
                        $attributes = "";
                      $attributes = getAttributes($lvl3['attributes']);
                      $html .= '<li'.(($lvl3['featured_only']>0 && ($lvl3['featured_link']>0||$lvl3['image_path']!=""))?' class="duplicate-feature"':'').'><a href="' . $lvl3['path'] . '" title="' . $lvl3['description'] . '"' .$attributes .'>' . $lvl3['title'] . '</a></li>';
						$count_in_columns++;
					}
					if ($sublinks) {
						$html .= '</ul>';
					}
				}
				$html .= '</li>';
			}
			$html .= '</ul></li>'; //Closes left ul
			$html .= '</ul>'; //Closes lvl2 .links 
			// -- End Non-featured links --
      
			// -- Render Pictures --
			foreach ($lvl1['below'] as $lvl2) {
				if (isset($lvl2['mega_menu']) && $lvl2['mega_menu']) {
					$html .= '<div class="highlight">';
					$html .= '<a href="'.$lvl2['path'].'"><img src="'.file_create_url(file_load($lvl2['image_path'])->uri).'" alt="'.$lvl2['image_alt'].'" /></a><br/>';
					$html .= '<a href="'.$lvl2['path'].'">'.$lvl2['title'].'</a>';
					$html .= '<p>'.$lvl2['featured_text'].'</p></div>';
				}
				foreach ($lvl2['below'] as $lvl3) {
					if (isset($lvl3['mega_menu']) && $lvl3['mega_menu']) {
						$html .= '<div class="highlight">';
						$html .= '<a href="'.$lvl3['path'].'"><img src="'.file_create_url(file_load($lvl3['image_path'])->uri).'" alt="'.$lvl3['image_alt'].'" /></a><br/>';
						$html .= '<a href="'.$lvl3['path'].'">'.$lvl3['title'] . '</a>';
						$html .= '<p>'.$lvl3['featured_text'].'</p></div>';
					}
				}
			}
			$html .= "</div>"; //closes mega
		}
		$html .= "</li>"; //closes lvl1 li
	}
	$html .= "</ul>"; //closes menu ul
	return $html;
}
/***
 * @param array $attributes
 * @return string
 * This is to get the attributes out of the menu items
 */
function getAttributes(array $attributes) {
  $options = "";
  foreach ($attributes as $key => $value) {
    if (is_array($value)) {
      $value = implode(" ", $value);
    }
    $options .= $key . '=' . '"' . $value . '" ';
  }
return $options;
}
/**
 * Returns the rendered HTML menu
 * @return the rendered HTML menu
 */
function _renderMainMenu() {
	return renderMenu(getMenuArray(menu_tree_all_data(variable_get('menu_main_links_source', 'main-menu'))));
}
